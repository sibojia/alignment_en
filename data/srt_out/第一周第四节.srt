1
00:00:00,0 --> 00:00:14,69
Let's first look at this photograph,

2
00:00:14,69 --> 00:00:17,13
of this respectable old man.

3
00:00:17,13 --> 00:00:18,7
His name is Thomas Tutte,

4
00:00:18,7 --> 00:00:21,31
a very highly-regarded Canadian combinatorist.

5
00:00:21,31 --> 00:00:26,66
But he is not only a titan in the world of combinatorics.

6
00:00:27,45 --> 00:00:29,64
Recently findings reveal that

7
00:00:29,64 --> 00:00:33,11
he in fact an important in the history of humanbeings.

8
00:00:33,69 --> 00:00:35,09
We all know that during WWII,

9
00:00:35,09 --> 00:00:40,59
Germany held a leading position in both hardware and encryption techniques.

10
00:00:41,21 --> 00:00:46,38
They used the Lorenz cipher, reproduceable by the so-called "Tunny Machine".

11
00:00:46,38 --> 00:00:49,82
This device held 12 mechanical wheels

12
00:00:50,33 --> 00:00:54,21
enabling very elaborate encryption.

13
00:00:54,21 --> 00:00:56,49
So the Germans believed that the code 

14
00:00:56,49 --> 00:00:59,21
generated by this machine was unbreakable.

15
00:01:00,0 --> 00:01:02,74
What they didn't expect was the young Tutte 

16
00:01:02,74 --> 00:01:06,72
to accomplish an astonishing feat of ingenuity.

17
00:01:07,4 --> 00:01:11,86
He only required just two messages sent by the Germans

18
00:01:11,86 --> 00:01:13,81
to successfully break Tunny.

19
00:01:14,43 --> 00:01:15,74
Thus we can see that

20
00:01:15,74 --> 00:01:19,57
not even sophisticated devices employed by the Germans

21
00:01:19,57 --> 00:01:21,01
are immune to combinatorics. 

22
00:01:21,62 --> 00:01:24,74
Let's now turn to the mobile phones we use every day:

23
00:01:24,74 --> 00:01:26,76
we often need to unlock the screens.

24
00:01:26,76 --> 00:01:29,07
But how safe is this process?

25
00:01:29,07 --> 00:01:30,69
Here is the well-known iPhone.

26
00:01:32,76 --> 00:01:36,5
Its passcode is very simple, comprising only four digits.

27
00:01:38,78 --> 00:01:42,27
So is this method perhaps not as secure 

28
00:01:42,27 --> 00:01:43,0
as we would like?

29
00:01:44,31 --> 00:01:47,9
Do Android phones employ a superior technique?

30
00:01:48,48 --> 00:01:50,7
Next we'll watch a short video

31
00:02:15,66 --> 00:02:19,01
It seems that even Professor Du can not break the code.

32
00:02:19,57 --> 00:02:20,83
But can Professor Tutte

33
00:02:20,83 --> 00:02:23,84
help us with the passcode problem, using combinatorics?

34
00:02:24,45 --> 00:02:28,98
Whether your mobile is secure or not can only be determined by calculation.

35
00:02:28,98 --> 00:02:30,17
Next we'll see

36
00:02:30,17 --> 00:02:34,03
How to calculate how many passcode combinations there are in total.

37
00:02:36,81 --> 00:02:39,24
This is the Android "screen locked" interface.

38
00:02:39,76 --> 00:02:41,61
We can clearly see that

39
00:02:41,61 --> 00:02:45,28
We can use different paths to set different passcodes.

40
00:02:45,85 --> 00:02:48,57
Simply put, we are basically just

41
00:02:48,57 --> 00:02:50,74
choosing several numbers from these nine.

42
00:02:51,9 --> 00:02:57,46
If you set a one- or two- digit passcode, it is far too easy to break.

43
00:02:58,08 --> 00:03:01,07
So Android passcodes should at least use 4 digits.

44
00:03:01,86 --> 00:03:04,55
What is the maximum number of digits you can use?

45
00:03:05,08 --> 00:03:08,98
Only 9, for you can only join up a maximum of 9 dots.

46
00:03:09,61 --> 00:03:11,8
If we ignore the positions of those dots, 

47
00:03:11,8 --> 00:03:15,29
let's calculate how many possibilities there are altogether.

48
00:03:15,29 --> 00:03:17,14
If we set a four-digit passcode,

49
00:03:17,69 --> 00:03:23,31
if we pick 4 digits from nine, there are P(9,4) possibilities.

50
00:03:23,31 --> 00:03:28,9
Picking 5 gives P(9,5) possibilities... all the way up to P(9,9).

51
00:03:29,64 --> 00:03:34,8
The sum of all these numbers is 985824.

52
00:03:35,31 --> 00:03:38,57
But this way of calculation does not take into account

53
00:03:38,57 --> 00:03:42,68
the effects of ordering and position when linking up dots.

54
00:03:42,68 --> 00:03:45,75
For example, let's observe the fact that 

55
00:03:45,75 --> 00:03:48,19
in an interface such as this,

56
00:03:48,19 --> 00:03:51,65
When we go from 1 to 3 we have to pass through 2.

57
00:03:52,24 --> 00:03:56,06
So if I set the passcode to be 1 and then 3,

58
00:03:56,06 --> 00:03:58,86
then this is an infeasible passcode.

59
00:03:59,87 --> 00:04:03,57
So we see that, because in the prior calculation

60
00:04:03,57 --> 00:04:06,69
we did not consider restraints posed by positioning,

61
00:04:07,21 --> 00:04:10,14
we will also have counted some infeasible passcodes.

62
00:04:10,94 --> 00:04:14,0
So how many feasible passcodes are there altogether?

63
00:04:14,71 --> 00:04:16,12
One possible approach:

64
00:04:16,12 --> 00:04:21,59
we can count up all the infeasible passcodes; subtracting this number

65
00:04:21,59 --> 00:04:25,19
from the total gives the number of the logical passcodes.

66
00:04:26,25 --> 00:04:27,73
So from this we can see,

67
00:04:27,73 --> 00:04:30,12
We can calculate all the possibilities,

68
00:04:30,12 --> 00:04:32,09
exclude the infeasible solutions,

69
00:04:32,77 --> 00:07:52,11


