1
00:00:12,891 --> 00:00:14,639
Let's first look at this photograph,

2
00:00:15,202 --> 00:00:16,636
of this respectable old man.

3
00:00:17,198 --> 00:00:18,946
His name is Thomas Tutte,

4
00:00:19,694 --> 00:00:22,501
a very highly-regarded Canadian combinatorist.

5
00:00:23,064 --> 00:00:26,681
But he is not only a titan in the world of combinatorics.

6
00:00:27,180 --> 00:00:29,740
Recently findings reveal that

7
00:00:30,176 --> 00:00:34,983
he in fact an important in the history of humanbeings.

8
00:00:35,667 --> 00:00:37,726
We all know that during WWII,

9
00:00:38,165 --> 00:00:42,471
Germany held a leading position in both hardware and encryption techniques.

10
00:00:42,968 --> 00:00:45,405
They used the Lorenz cipher, reproduceable by the so-called "Tunny Machine".

11
00:00:46,152 --> 00:00:49,333
This device held 12 mechanical wheels

12
00:00:49,709 --> 00:00:51,207
enabling very elaborate encryption.

13
00:00:51,704 --> 00:00:54,015
So the Germans believed that the code 

14
00:00:54,451 --> 00:00:56,072
generated by this machine was unbreakable.

15
00:00:57,258 --> 00:01:00,940
What they didn't expect was the young Tutte 

16
00:01:01,379 --> 00:01:02,874
to accomplish an astonishing feat of ingenuity.

17
00:01:03,623 --> 00:01:07,117
He only required just two messages sent by the Germans

18
00:01:07,617 --> 00:01:11,797
to successfully break Tunny.

19
00:01:13,295 --> 00:01:14,667
Thus we can see that

20
00:01:15,167 --> 00:01:16,790
not even sophisticated devices employed by the Germans

21
00:01:17,291 --> 00:01:19,038
are immune to combinatorics. 

22
00:01:20,034 --> 00:01:22,469
Let's now turn to the mobile phones we use every day:

23
00:01:23,157 --> 00:01:25,779
we often need to unlock the screens.

24
00:01:26,400 --> 00:01:28,086
But how safe is this process?

25
00:01:29,269 --> 00:01:31,830
Here is the well-known iPhone.

26
00:01:32,828 --> 00:01:37,258
Its passcode is very simple, comprising only four digits.

27
00:01:37,881 --> 00:01:40,191
So is this method perhaps not as secure 

28
00:01:40,862 --> 00:01:42,173
as we would like?

29
00:01:43,606 --> 00:01:47,725
Do Android phones employ a superior technique?

30
00:01:48,474 --> 00:01:50,283
Next we'll watch a short video





31
00:02:16,304 --> 00:02:17,989
It seems that even Professor Du can not break the code.

32
00:02:18,676 --> 00:02:20,298
But can Professor Tutte

33
00:02:20,798 --> 00:02:22,919
help us with the passcode problem, using combinatorics?

34
00:02:23,793 --> 00:02:27,662
Whether your mobile is secure or not can only be determined by calculation.

35
00:02:28,286 --> 00:02:30,406
Next we'll see

36
00:02:30,984 --> 00:02:36,101
How to calculate how many passcode combinations there are in total.

37
00:02:37,162 --> 00:02:41,031
This is the Android "screen locked" interface.

38
00:02:41,467 --> 00:02:42,405
We can clearly see that

39
00:02:42,780 --> 00:02:46,836
We can use different paths to set different passcodes.

40
00:02:47,957 --> 00:02:50,079
Simply put, we are basically just

41
00:02:50,578 --> 00:02:54,198
choosing several numbers from these nine.

42
00:02:55,072 --> 00:02:57,255
If you set a one- or two- digit passcode, it is far too easy to break.

43
00:02:57,881 --> 00:03:02,434
So Android passcodes should at least use 4 digits.

44
00:03:02,871 --> 00:03:04,369
What is the maximum number of digits you can use?

45
00:03:04,869 --> 00:03:06,802
Only 9, for you can only join up a maximum of 9 dots.

46
00:03:07,491 --> 00:03:10,923
If we ignore the positions of those dots, 

47
00:03:11,547 --> 00:03:13,981
let's calculate how many possibilities there are altogether.

48
00:03:14,478 --> 00:03:16,976
If we set a four-digit passcode,

49
00:03:17,473 --> 00:03:22,341
if we pick 4 digits from nine, there are P(9,4) possibilities.

50
00:03:22,965 --> 00:03:29,141
Picking 5 gives P(9,5) possibilities... all the way up to P(9,9).

51
00:03:29,650 --> 00:03:34,760
The sum of all these numbers is 985824.





52
00:03:35,297 --> 00:03:38,564
But this way of calculation does not take into account

53
00:03:38,684 --> 00:03:41,748
the effects of ordering and position when linking up dots.

54
00:03:42,641 --> 00:03:44,367
For example, let's observe the fact that 

55
00:03:44,487 --> 00:03:46,366
in an interface such as this,

56
00:03:46,486 --> 00:03:51,045
When we go from 1 to 3 we have to pass through 2.

57
00:03:51,796 --> 00:03:56,162
So if I set the passcode to be 1 and then 3,

58
00:03:56,536 --> 00:03:59,967
then this is an infeasible passcode.

59
00:04:00,783 --> 00:04:03,275
So we see that, because in the prior calculation

60
00:04:03,657 --> 00:04:06,708
we did not consider restraints posed by positioning,

61
00:04:07,029 --> 00:04:10,451
we will also have counted some infeasible passcodes.

62
00:04:11,901 --> 00:04:15,318
So how many feasible passcodes are there altogether?

63
00:04:16,298 --> 00:04:17,623
One possible approach:

64
00:04:17,743 --> 00:04:20,014
we can count up all the infeasible passcodes; subtracting this number

65
00:04:20,909 --> 00:04:25,258
from the total gives the number of the logical passcodes.

66
00:04:25,757 --> 00:04:27,815
So from this we can see,

67
00:04:28,151 --> 00:04:30,748
We can calculate all the possibilities,

68
00:04:30,868 --> 00:04:32,744
exclude the infeasible solutions,

69
00:04:32,864 --> 00:04:36,175

and ultimately emerge with the number of logical ones.

70
00:04:37,310 --> 00:04:39,171
So let's introduce such a constraint,

71
00:04:39,291 --> 00:04:43,290
and restate what passcodes are allowed.





72
00:04:43,789 --> 00:04:47,222
If the line segment formed by two dots passes over a third dot,

73
00:04:48,116 --> 00:04:51,775
and this third dot was not linked up previously - then it's not allowed.

74
00:04:52,337 --> 00:04:54,336
If it was previously linked up then it is allowed.

75
00:04:55,684 --> 00:04:58,047
It's a somewhat complex rule.

76
00:04:58,587 --> 00:05:01,542
Because of this, it's difficult to employ a purely mathematical method.

77
00:05:02,229 --> 00:05:05,037
Instead, we can code up a

78
00:05:05,475 --> 00:05:07,284
computer program

79
00:05:07,596 --> 00:05:10,778
to enumerate all the logical solutions.

80
00:05:12,275 --> 00:05:15,583
Now if we check the results returned by the computer program,

81
00:05:16,083 --> 00:05:21,513
There are 389112 possibilities altogether.

82
00:05:21,880 --> 00:05:24,256
This is a pretty large number!

83
00:05:24,376 --> 00:05:25,568
So it would seem there are a lot of solutions.

84
00:05:25,688 --> 00:05:27,815
Compared to the iPhone we saw previously,

85
00:05:28,251 --> 00:05:29,747
whose passcode is limited to 4 digits.

86
00:05:30,186 --> 00:05:32,868
There are ten choices for each passcode,

87
00:05:33,176 --> 00:05:36,626
and so 10^4 gives us

88
00:05:36,936 --> 00:05:40,372
10000 possibilities .

89
00:05:40,841 --> 00:05:43,450
On the other hand, the Android way of unlocking by joining up dots,

90
00:05:43,741 --> 00:05:46,736
there seems to be over 380,000 possibilities.

91
00:05:47,178 --> 00:05:49,233
So Android is much better, right?



92
00:05:50,300 --> 00:05:54,280
But think again! When we set passcodes,

93
00:05:54,848 --> 00:05:56,472
How many digits do we use?

94
00:05:57,565 --> 00:06:00,028
Most of us are afraid we might forget the passcode,

95
00:06:00,652 --> 00:06:03,833
so we generally only use about 4 dots maximal.

96
00:06:04,546 --> 00:06:06,081
Now if we reconsider with this fact in mind,

97
00:06:06,201 --> 00:06:09,449
that most people only use about 4 digits,

98
00:06:09,569 --> 00:06:14,336
then there are only 1624 feasible passcodes.

99
00:06:15,410 --> 00:06:17,949
With under 2000 feasible passcodes,

100
00:06:18,069 --> 00:06:20,369
if we enlist the aid of Professor Tutte,

101
00:06:20,762 --> 00:06:22,978
he will probably crack it in minutes.

102
00:06:23,909 --> 00:06:26,599
So how many digits must we set just to be safe?

103
00:06:27,152 --> 00:06:30,731
If we want to achieve at least the level of the iPhone,

104
00:06:31,757 --> 00:06:36,316
Then we count up the number of 4-digit passcodes to be 1624,

105
00:06:36,436 --> 00:06:38,502
and the number of 5-digit passcodes to be 7152.

106
00:06:39,495 --> 00:06:43,743
If we decide that too many dots is too hard to remember,

107
00:06:44,242 --> 00:06:45,492
and we have fewer than 6 digits,

108
00:06:46,052 --> 00:06:52,174
Then there are  totally 8776 possibilities.

109
00:06:52,294 --> 00:06:55,402
Thus we can see that on your Android,

110
00:06:55,522 --> 00:06:57,660
if your passcode is fewer than 6 digits,

111
00:06:58,095 --> 00:07:02,123
it won't be as secure as an iPhone.

112
00:07:03,994 --> 00:07:05,703
Just then we used mobile phone passcodes

113
00:07:05,823 --> 00:07:08,393
to demonstrate how to perform calculations.

114
00:07:08,513 --> 00:07:13,199
We shall find that there are many strategies to perform a calculation.

115
00:07:13,319 --> 00:07:16,047
We may use multiplication and addition

116
00:07:16,167 --> 00:07:18,197
and possibly even subtraction.

117
00:07:18,317 --> 00:07:20,328
But no matter how we do it,

118
00:07:20,448 --> 00:07:23,030
our goal is always the same,

119
00:07:23,150 --> 00:07:28,384
namely to generate, under reasonable conditions,

120
00:07:28,504 --> 00:07:32,786
all the possible solutions without double-counting or missing any out.

121
00:07:32,906 --> 00:07:35,434
So the basic underlying principle for counting

122
00:07:35,554 --> 00:07:38,495
is that we must not miss any possible solutions or double-count.

123
00:07:38,615 --> 00:07:41,842
This aim, in fact, is not so easy to achieve.

124
00:07:41,962 --> 00:07:46,151
In the next lesson, we shall share some

125
00:07:46,271 --> 00:07:51,564
fundamental concepts necessary to counting well in Combinatorics.

